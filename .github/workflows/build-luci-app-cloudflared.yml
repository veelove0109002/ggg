name: Build luci-app-cloudflared (with zh-cn)

on:
  workflow_dispatch:
    inputs:
      openwrt_sdk:
        description: "OpenWrt SDK download URL (tar.xz)"
        required: true
        default: "https://downloads.openwrt.org/releases/23.05.3/targets/x86/64/openwrt-sdk-23.05.3-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
      target:
        description: "Target triple used by SDK (e.g., x86_64)"
        required: true
        default: "x86_64"
      luci_app_repo:
        description: "Git repo of luci-app-cloudflared"
        required: true
        default: "https://github.com/sbwml/luci-app-cloudflared"
      luci_app_ref:
        description: "Branch or tag of luci-app-cloudflared"
        required: true
        default: "main"

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      TZ: Asia/Shanghai
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3 python3-distutils \
            rsync unzip zlib1g-dev file wget curl ca-certificates \
            subversion upx-ucl po4a

      - name: Prepare workspace
        run: |
          mkdir -p $GITHUB_WORKSPACE/.cache/dl
          echo "CACHE_DIR=$GITHUB_WORKSPACE/.cache" >> $GITHUB_ENV

      - name: Download OpenWrt SDK
        id: sdk
        run: |
          set -e
          SDK_URL="${{ inputs.openwrt_sdk }}"
          SDK_ARCHIVE="$(basename "$SDK_URL")"
          wget -q "$SDK_URL"
          tar -xf "$SDK_ARCHIVE"
          SDK_DIR=$(tar -tf "$SDK_ARCHIVE" | head -1 | cut -f1 -d"/")
          echo "SDK_DIR=$SDK_DIR" >> $GITHUB_ENV

      - name: Cache downloads (dl)
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_DIR }}/dl
          key: dl-${{ hashFiles('**/feeds.conf.default') }}-${{ inputs.openwrt_sdk }}
          restore-keys: |
            dl-

      - name: Setup SDK feeds and packages
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -e
          echo "src-git packages https://github.com/openwrt/packages" > feeds.conf.default
          echo "src-git luci https://github.com/openwrt/luci" >> feeds.conf.default
          echo "src-git routing https://github.com/openwrt/routing" >> feeds.conf.default
          echo "src-git telephony https://github.com/openwrt/telephony" >> feeds.conf.default

          ./scripts/feeds update -a
          ./scripts/feeds install -a

          # Link cloudflared LuCI app into package dir
          mkdir -p package/custom
          cd package/custom
          git clone --depth=1 --branch "${{ inputs.luci_app_ref }}" "${{ inputs.luci_app_repo }}" luci-app-cloudflared

      - name: Configure SDK
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -e
          # Ensure downloads cache is shared
          mkdir -p $GITHUB_WORKSPACE/.cache/dl
          ln -sf $GITHUB_WORKSPACE/.cache/dl dl

          # Make defconfig (no full target toolchain change allowed in SDK)
          make defconfig

      - name: Build luci-app-cloudflared (and zh-cn i18n)
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -e
          # Ensure po2lmo tool is available for LuCI translations
          if ! command -v po2lmo >/dev/null 2>&1; then
            echo "Building po2lmo..."
            make package/luci/host/compile V=s || true
          fi

          # Build the app. LuCI automatically builds i18n packages (e.g., luci-i18n-cloudflared-zh-cn)
          make package/luci-app-cloudflared/compile V=s -j$(nproc)

      - name: Collect artifacts
        id: artifacts
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -e
          mkdir -p $GITHUB_WORKSPACE/artifacts
          find bin -type f -name "*.ipk" -print -exec cp {} $GITHUB_WORKSPACE/artifacts/ \;
          echo "count=$(ls -1 $GITHUB_WORKSPACE/artifacts/*.ipk | wc -l)" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        if: steps.artifacts.outputs.count != '0'
        uses: actions/upload-artifact@v4
        with:
          name: luci-app-cloudflared-ipks-${{ github.run_id }}
          path: artifacts/*.ipk
          if-no-files-found: error

      - name: Show result summary
        run: |
          echo "Built IPKs:" && ls -lh artifacts || true
