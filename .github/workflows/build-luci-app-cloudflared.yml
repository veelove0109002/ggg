name: Build luci-app-cloudflared (with zh-cn)

on:
  workflow_dispatch:
    inputs:
      openwrt_sdk:
        description: "OpenWrt SDK download URL (tar.xz)"
        required: true
        default: "https://downloads.openwrt.org/releases/23.05.3/targets/x86/64/openwrt-sdk-23.05.3-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
      target:
        description: "Target triple used by SDK (e.g., x86_64)"
        required: true
        default: "x86_64"
      luci_app_repo:
        description: "owner/repo of luci-app-cloudflared (public repo). Example: someuser/luci-app-cloudflared"
        required: false
      luci_app_ref:
        description: "Branch or tag of luci-app-cloudflared (used when luci_app_repo is set)"
        required: false
        default: "main"
      luci_app_tar:
        description: "Optional: Direct tarball URL of luci-app-cloudflared (e.g., https://codeload.github.com/<owner>/<repo>/tar.gz/<ref>)"
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      TZ: Asia/Shanghai
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3 python3-distutils \
            rsync unzip zlib1g-dev file wget curl ca-certificates \
            subversion upx-ucl po4a

      - name: Prepare workspace
        run: |
          mkdir -p $GITHUB_WORKSPACE/.cache/dl
          echo "CACHE_DIR=$GITHUB_WORKSPACE/.cache" >> $GITHUB_ENV

      - name: Download OpenWrt SDK
        id: sdk
        run: |
          set -e
          SDK_URL="${{ inputs.openwrt_sdk }}"
          SDK_ARCHIVE="$(basename "$SDK_URL")"
          wget -q "$SDK_URL"
          tar -xf "$SDK_ARCHIVE"
          SDK_DIR=$(tar -tf "$SDK_ARCHIVE" | head -1 | cut -f1 -d"/")
          echo "SDK_DIR=$SDK_DIR" >> $GITHUB_ENV

      - name: Cache downloads (dl)
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_DIR }}/dl
          key: dl-${{ hashFiles('**/feeds.conf.default') }}-${{ inputs.openwrt_sdk }}
          restore-keys: |
            dl-

      - name: Setup SDK feeds and packages
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -e
          FEED_BRANCH=openwrt-23.05
          echo "src-git packages https://github.com/openwrt/packages;$FEED_BRANCH" > feeds.conf.default
          echo "src-git luci https://github.com/openwrt/luci;$FEED_BRANCH" >> feeds.conf.default

          ./scripts/feeds update -a
          # Install minimal LuCI set, skip full deps to avoid sdk missing virtuals
          ./scripts/feeds install -p luci luci-base luci-light luci-compat rpcd-mod-luci cgi-io luci-i18n-base-zh-cn || true

          # Prepare custom package dir
          mkdir -p package/custom/luci-app-cloudflared

      - name: Create built-in luci-app-cloudflared (with zh-cn)
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -e
          PKGDIR=package/custom/luci-app-cloudflared
          mkdir -p "$PKGDIR/luasrc/controller" \
                   "$PKGDIR/luasrc/model/cbi/cloudflared" \
                   "$PKGDIR/po/zh-cn" \
                   "$PKGDIR/root/etc/config"

          cat > "$PKGDIR/Makefile" <<'EOF'
include $(TOPDIR)/rules.mk

LUCI_TITLE:=LuCI support for Cloudflared
LUCI_PKGARCH:=all
LUCI_DEPENDS:=+luci-compat
PKG_NAME:=luci-app-cloudflared
PKG_VERSION:=1.0.0
PKG_RELEASE:=1

include $(TOPDIR)/feeds/luci/luci.mk
# call BuildPackage - OpenWrt buildroot signature
EOF

          cat > "$PKGDIR/luasrc/controller/cloudflared.lua" <<'EOF'
module("luci.controller.cloudflared", package.seeall)

function index()
  if not nixio.fs.access("/etc/config/cloudflared") then return end
  entry({"admin","services","cloudflared"}, cbi("cloudflared/config"), _("Cloudflared"), 60).dependent=false
end
EOF

          cat > "$PKGDIR/luasrc/model/cbi/cloudflared/config.lua" <<'EOF'
local m = Map("cloudflared", translate("Cloudflared"), translate("Configure Cloudflare Tunnel client."))

local s = m:section(TypedSection, "cloudflared", translate("General Settings"))
s.anonymous = true

local o = s:option(Flag, "enabled", translate("Enable"))
o.rmempty = false

local t = s:option(Value, "token", translate("Tunnel Token"))
t.password = true

return m
EOF

          cat > "$PKGDIR/po/zh-cn/cloudflared.po" <<'EOF'
msgid "Cloudflared"
msgstr "Cloudflared"

msgid "Configure Cloudflare Tunnel client."
msgstr "配置 Cloudflare Tunnel 客户端。"

msgid "General Settings"
msgstr "常规设置"

msgid "Enable"
msgstr "启用"

msgid "Tunnel Token"
msgstr "隧道令牌"
EOF

          cat > "$PKGDIR/root/etc/config/cloudflared" <<'EOF'
config cloudflared 'config'
	option enabled '0'
	option token ''
EOF

      - name: Configure SDK
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -e
          # Ensure downloads cache is shared
          mkdir -p $GITHUB_WORKSPACE/.cache/dl
          ln -sf $GITHUB_WORKSPACE/.cache/dl dl

          # Make defconfig (no full target toolchain change allowed in SDK)
          make defconfig
          # Ensure language package selected
          echo "CONFIG_PACKAGE_luci-app-cloudflared=y" >> .config
          echo "CONFIG_PACKAGE_luci-i18n-cloudflared-zh-cn=y" >> .config
          make defconfig

      - name: Build luci-app-cloudflared (and zh-cn i18n)
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -e
          # Ensure po2lmo tool is available for LuCI translations
          make package/luci/host/compile V=s || true

          # Build app and LMO from built-in source
          make package/luci-app-cloudflared/compile V=s -j$(nproc)

          # Build zh-cn translation
          if [ -f package/custom/luci-app-cloudflared/po/zh-cn/cloudflared.po ]; then
            po2lmo package/custom/luci-app-cloudflared/po/zh-cn/cloudflared.po \
                   package/custom/luci-app-cloudflared/po/zh-cn/cloudflared.zh-cn.lmo || true
          fi

      - name: Collect artifacts
        id: artifacts
        working-directory: ${{ env.SDK_DIR }}
        run: |
          set -e
          mkdir -p $GITHUB_WORKSPACE/artifacts
          find bin -type f -name "*.ipk" -print -exec cp {} $GITHUB_WORKSPACE/artifacts/ \;
          echo "count=$(ls -1 $GITHUB_WORKSPACE/artifacts/*.ipk | wc -l)" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        if: steps.artifacts.outputs.count != '0'
        uses: actions/upload-artifact@v4
        with:
          name: luci-app-cloudflared-ipks-${{ github.run_id }}
          path: artifacts/*.ipk
          if-no-files-found: error

      - name: Show result summary
        run: |
          echo "Built IPKs:" && ls -lh artifacts || true
